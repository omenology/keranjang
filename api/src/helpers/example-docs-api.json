{
  "openapi": "3.0.0",
  "info": {
    "description": "Sed vel mollis lectus, quis rutrum augue. Etiam mattis volutpat hendrerit. Suspendisse nulla ex, tincidunt ac metus sed, tempor ultrices dolor. Integer eget egestas diam, blandit finibus nisl. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Suspendisse potenti. Maecenas sit amet turpis iaculis, fringilla quam vitae, mattis erat. Nam ut ullamcorper ligula. Nulla auctor semper dignissim. Pellentesque nec eros hendrerit dolor scelerisque porttitor non sed sapien. Nullam aliquam bibendum quam vel vulputate. Nunc non mi risus.",
    "version": "1.0.0",
    "title": "API Documentation",
    "contact": { "email": "ikballukmanulhakim5@gmail.com" }
  },
  "servers": [
    {
      "url": "http://localhost:4000/",
      "description": "Local Server"
    }
  ],
  "tags": [
    { "name": "auth", "description": "mengenai login, register, dan lupa password" },
    { "name": "user", "description": "Operations about user" },
    { "name": "barang", "description": "Hal hal mengenai CRUD barang" },
    { "name": "keranjang", "description": "Hal hal mengenai CRUD keranjang" },
    { "name": "checkout", "description": "Hal hal mengenai riwayat ransaksi" }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Login",
        "description": "Login untuk mengakses API",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "username": {
                    "type": "string",
                    "example": "user1"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImVtYWlsMkBtYWlsLmNvbSIsInVzZXJuYW1lIjoidXNlcjIiLCJ1c2VySWQiOiJlYzE0YjExZS05MTU1LTQ0NDEtYjlhNy0zNjFmYTRiZTJmNWQiLCJpYXQiOjE2Mzg1MTk4NTYsImV4cCI6MTYzODU0ODY1Nn0.F1HiKhvweR8QK2npzbqi-KipV_Rx_ibcnhnTfYmGTsw"
                  }
                }
              }
            }
          },
          "400": {
            "description": "error authorized failed",
            "content": {
              "application/json": {
                "example": {
                  "message": "password required"
                }
              }
            }
          }
        }
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": ["pet"],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "petId", "in": "path", "description": "ID of pet to update", "required": true, "type": "integer", "format": "int64" },
          { "name": "additionalMetadata", "in": "formData", "description": "Additional data to pass to server", "required": false, "type": "string" },
          { "name": "file", "in": "formData", "description": "file to upload", "required": false, "type": "file" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ApiResponse" } } },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/pet": {
      "post": {
        "tags": ["pet"],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "in": "body", "name": "body", "description": "Pet object that needs to be added to the store", "required": true, "schema": { "$ref": "#/definitions/Pet" } }],
        "responses": { "405": { "description": "Invalid input" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      },
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "in": "body", "name": "body", "description": "Pet object that needs to be added to the store", "required": true, "schema": { "$ref": "#/definitions/Pet" } }],
        "responses": { "400": { "description": "Invalid ID supplied" }, "404": { "description": "Pet not found" }, "405": { "description": "Validation exception" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": { "type": "string", "enum": ["available", "pending", "sold"], "default": "available" },
            "collectionFormat": "multi"
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/Pet" } } }, "400": { "description": "Invalid status value" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "name": "tags", "in": "query", "description": "Tags to filter by", "required": true, "type": "array", "items": { "type": "string" }, "collectionFormat": "multi" }],
        "responses": { "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/Pet" } } }, "400": { "description": "Invalid tag value" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "deprecated": true
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "name": "petId", "in": "path", "description": "ID of pet to return", "required": true, "type": "integer", "format": "int64" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Pet" } },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          { "name": "petId", "in": "path", "description": "ID of pet that needs to be updated", "required": true, "type": "integer", "format": "int64" },
          { "name": "name", "in": "formData", "description": "Updated name of the pet", "required": false, "type": "string" },
          { "name": "status", "in": "formData", "description": "Updated status of the pet", "required": false, "type": "string" }
        ],
        "responses": { "405": { "description": "Invalid input" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          { "name": "api_key", "in": "header", "required": false, "type": "string" },
          { "name": "petId", "in": "path", "description": "Pet id to delete", "required": true, "type": "integer", "format": "int64" }
        ],
        "responses": { "400": { "description": "Invalid ID supplied" }, "404": { "description": "Pet not found" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": ["store"],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": ["application/json"],
        "parameters": [],
        "responses": { "200": { "description": "successful operation", "schema": { "type": "object", "additionalProperties": { "type": "integer", "format": "int32" } } } },
        "security": [{ "api_key": [] }]
      }
    },
    "/store/order": {
      "post": {
        "tags": ["store"],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "in": "body", "name": "body", "description": "order placed for purchasing the pet", "required": true, "schema": { "$ref": "#/definitions/Order" } }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Order" } }, "400": { "description": "Invalid Order" } }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": ["store"],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "name": "orderId", "in": "path", "description": "ID of pet that needs to be fetched", "required": true, "type": "integer", "maximum": 10, "minimum": 1, "format": "int64" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Order" } },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Order not found" }
        }
      },
      "delete": {
        "tags": ["store"],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "name": "orderId", "in": "path", "description": "ID of the order that needs to be deleted", "required": true, "type": "integer", "minimum": 1, "format": "int64" }],
        "responses": { "400": { "description": "Invalid ID supplied" }, "404": { "description": "Order not found" } }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "in": "body", "name": "body", "description": "List of user object", "required": true, "schema": { "type": "array", "items": { "$ref": "#/definitions/User" } } }],
        "responses": { "default": { "description": "successful operation" } }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "name": "username", "in": "path", "description": "The name that needs to be fetched. Use user1 for testing. ", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/User" } },
          "400": { "description": "Invalid username supplied" },
          "404": { "description": "User not found" }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          { "name": "username", "in": "path", "description": "name that need to be updated", "required": true, "type": "string" },
          { "in": "body", "name": "body", "description": "Updated user object", "required": true, "schema": { "$ref": "#/definitions/User" } }
        ],
        "responses": { "400": { "description": "Invalid user supplied" }, "404": { "description": "User not found" } }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "name": "username", "in": "path", "description": "The name that needs to be deleted", "required": true, "type": "string" }],
        "responses": { "400": { "description": "Invalid username supplied" }, "404": { "description": "User not found" } }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          { "name": "username", "in": "query", "description": "The user name for login", "required": true, "type": "string" },
          { "name": "password", "in": "query", "description": "The password for login in clear text", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": { "type": "string", "format": "date-time", "description": "date in UTC when token expires" },
              "X-Rate-Limit": { "type": "integer", "format": "int32", "description": "calls per hour allowed by the user" }
            },
            "schema": { "type": "string" }
          },
          "400": { "description": "Invalid username/password supplied" }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": ["application/json", "application/xml"],
        "parameters": [],
        "responses": { "default": { "description": "successful operation" } }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "in": "body", "name": "body", "description": "List of user object", "required": true, "schema": { "type": "array", "items": { "$ref": "#/definitions/User" } } }],
        "responses": { "default": { "description": "successful operation" } }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{ "in": "body", "name": "body", "description": "Created user object", "required": true, "schema": { "$ref": "#/definitions/User" } }],
        "responses": { "default": { "description": "successful operation" } }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "ffec0b55-e780-4256-bad4-16fd013e6bac"
          },
          "username": {
            "type": "string",
            "example": "john"
          },
          "email": {
            "type": "string",
            "example": "email@mail.com"
          },
          "password": {
            "type": "string",
            "example": "test"
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "barang": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "ffec0b55-e780-4256-bad4-16fd013e6bac"
          },
          "name": {
            "type": "string",
            "example": "nama barang"
          },
          "price": {
            "type": "integer",
            "example": 100
          },
          "description": {
            "type": "string",
            "example": "description barang "
          },
          "image": {
            "type": "string",
            "format": "url",
            "example": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/2048px-No_image_available.svg.png"
          }
        }
      },
      "keranjang": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "ffec0b55-e780-4256-bad4-16fd013e6bac"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "barang": {
            "$ref": "#/components/schemas/barang"
          }
        }
      },
      "checkout": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "ffec0b55-e780-4256-bad4-16fd013e6bac"
          },
          "orderId": {
            "type": "string",
            "example": "oreder-12121"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/barang"
            }
          },
          "totalPayment": {
            "type": "integer",
            "example": 100
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "shippingAddress": {
            "type": "string",
            "example": "address"
          },
          "reciver": {
            "type": "string",
            "example": "nama"
          },
          "paymentStatus": {
            "type": "string",
            "example": "pendding"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
      }
    }
  }
}
